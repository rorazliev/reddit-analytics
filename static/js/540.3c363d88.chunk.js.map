{"version":3,"file":"static/js/540.3c363d88.chunk.js","mappings":"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","sources":["components/Error/styles.tsx","components/Error/index.tsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/Post/styles.tsx","components/Post/index.tsx","components/PostList/styles.tsx","components/PostList/index.tsx","components/HeatMap/styles.tsx","components/HeatMap/index.tsx","utils/converters.ts","pages/SubredditPage/styles.tsx","pages/SubredditPage/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\ntype PropsType = {\n  readonly isLight: boolean,\n}\n\nexport const Container = styled.div`\n  justify-content: center;\n  box-sizing: border-box;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  display: flex;\n  padding: 2rem;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const Heading = styled.p<PropsType>`\n  color: ${(props) => (props.isLight ? '#007aff' : '#0a84ff')};\n  text-align: center;\n  max-width: 60rem;\n  font-size: 4rem;\n  margin: 0;\n\n  @media (max-width: 768px) {\n    font-size: 3rem;\n  }\n`;\n\nexport const Description = styled.p`\n  margin: 2rem 0 4rem;\n  text-align: center;\n  font-size: 1.6rem;\n  max-width: 60rem; \n`;\n","import React, { ReactElement } from 'react';\nimport { useSelector } from '../../redux/store';\nimport { Container, Description, Heading } from './styles';\n\nconst Error: React.FC = (): ReactElement => {\n  // Get a color scheme indicator\n  const isLight = useSelector((state) => state.app.colorScheme === 'light');\n\n  // Render\n  return (\n    <Container>\n      <Heading isLight={isLight}>:(</Heading>\n      <Description>\n        You ether did a mistake\n        {' '}\n        or this subreddit does not exist.\n      </Description>\n    </Container>\n  );\n};\n\nexport default Error;\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styled from 'styled-components';\n\ntype PropsType = {\n  readonly isLight: boolean,\n}\n\nexport const Card = styled.div<PropsType>`\n  background-color: ${(props) => (props.isLight ? '#ffffff' : '#1c1c1e')};\n  flex-direction: column;\n  border-radius: 1rem;\n  display: flex;\n  padding: 2rem;\n\n  &:not(:last-child) {\n    margin-bottom: 1rem;\n  }\n`;\n\nexport const Header = styled.div`\n  justify-content: space-between;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 2rem;\n  display: flex;\n  width: 100%;\n`;\n\nexport const Raiting = styled.div`\n  align-items: center;\n  font-size: 1.4rem;\n  font-weight: 600;\n  display: flex;\n\n  & > svg {\n    margin-right: 1rem;\n  }\n`;\n\nexport const Date = styled.span`\n  font-size: 1.4rem;\n  font-weight: 600;\n`;\n\nexport const Title = styled.a`\n  color: inherit;\n  text-decoration: none;\n  font-weight: 600;\n  line-height: 1.5;\n  font-size: 2rem;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const Author = styled.span`\n  font-size: 1.4rem;\n  margin-top: 2rem;\n`;\n\nexport const AuthorLink = styled.a`\n  text-decoration: none;\n  font-weight: 600;\n  color: inherit;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import React, { ReactElement } from 'react';\nimport dayjs from 'dayjs';\nimport { useSelector } from '../../redux/store';\nimport { Post as PostType } from '../../types/types';\nimport { Star } from '../IconSet';\nimport {\n  Author,\n  AuthorLink,\n  Card, Date, Header, Raiting, Title,\n} from './styles';\nimport { userURL } from '../../api/api';\n\ntype PropsType = {\n  data: PostType,\n}\n\nconst Post: React.FC<PropsType> = ({ data }): ReactElement => {\n  // Get a color scheme indicator\n  const isLight = useSelector((state) => state.app.colorScheme === 'light');\n\n  // Render\n  return (\n    <Card isLight={isLight}>\n      <Header>\n        <Raiting>\n          <Star />\n          {data.score >= 1000 ? `${(data.score / 1000).toFixed(1)}k` : data.score}\n        </Raiting>\n        <Date>\n          {dayjs.unix(data.created_utc).format('h:mma')}\n        </Date>\n      </Header>\n      <Title\n        href={data.full_link}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {data.title}\n\n      </Title>\n      <Author>\n        Posted by\n        {' '}\n        <AuthorLink\n          href={`${userURL}/${data.author}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {data.author}\n\n        </AuthorLink>\n      </Author>\n    </Card>\n  );\n};\n\nexport default Post;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 76.8rem;\n  margin: 0 auto;\n`;\n\nexport const Heading = styled.h3`\n  margin: 2rem 0 1rem;\n`;\n\nexport const Subheading = styled.p`\n  margin-bottom: 2rem;\n  margin-top: 0;\n`;\n","import React, { ReactElement } from 'react';\nimport { Post as PostType } from '../../types/types';\nimport Post from '../Post';\nimport { Container, Heading, Subheading } from './styles';\n\ntype PropsType = {\n  posts: PostType[],\n}\n\nconst PostList: React.FC<PropsType> = ({ posts = [] }): ReactElement => {\n  //\n  if (posts.length === 0) {\n    return (\n      <Container>\n        <Heading>No Post Found</Heading>\n        <Subheading>\n          We cound not find anything that is worthy of being noticed.\n          {' '}\n          Try another date and time.\n        </Subheading>\n      </Container>\n    );\n  }\n\n  // Render\n  return (\n    <Container>\n      <Heading>The Best of</Heading>\n      <Subheading>\n        We have found some remarkable posts that are worthy of being noticed.\n      </Subheading>\n      {posts.map((post) => (\n        <Post key={post.id} data={post} />\n      ))}\n    </Container>\n  );\n};\n\nexport default PostList;\n","import styled from 'styled-components';\n\ntype ContainerPropsType = {\n  readonly isLight: boolean,\n}\n\ntype CellPropsType = {\n  readonly isLight: boolean,\n  readonly opacity: number,\n}\n\nexport const Container = styled.div<ContainerPropsType>`\n  background-color: ${(props) => (props.isLight ? '#ffffff' : '#1c1c1e')};\n  transition: background 0.15s ease-in-out;\n  border-radius: 1rem;\n  padding: 2rem;\n`;\n\nexport const Table = styled.div`\n  white-space: nowrap;\n  overflow: auto;\n`;\n\nexport const Row = styled.div`\n  box-sizing: border-box;\n  flex-direction: row;\n  align-items: center;\n  display: flex;\n`;\n\nexport const Label = styled.div`\n  font-family: monospace;\n  font-size: 1.4rem;\n  min-width: 5rem;\n  flex: 1;\n`;\n\nexport const Time = styled.div`\n  transform: rotate(-90deg);\n  margin:  3.5rem 0.5rem 0;\n  box-sizing: border-box;\n  font-family: monospace;\n  white-space: nowrap;\n  padding: 0 1.5rem;\n  width: 3rem;\n`;\n\nexport const Cell = styled.button<CellPropsType>`\n  background-color: ${(props) => (props.isLight ? '#007aff' : '#0a84ff')};\n  opacity: ${(props) => (props.opacity * 0.25 + 0.1 > 1 ? 1 : props.opacity * 0.25 + 0.1)};\n  transition: all 0.15s ease-in-out;\n  box-sizing: border-box;\n  border-radius: 1rem;\n  cursor: pointer;\n  padding: 1.5rem;\n  margin: 0.5rem;\n  height: 3rem;\n  width: 3rem;\n  border: 0;\n\n  &:hover {\n    transform: scale(1.2)\n  }\n`;\n\nexport const Hint = styled.p`\n  box-sizing: border-box;\n  max-width: 76.8rem;\n  padding: 1rem 0 0;\n  font-size: 1.4rem;\n  margin: 1rem auto;\n  display: block;\n\n  @media (max-width: 768px) {\n    max-width: 30rem;\n  }\n`;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { ReactElement, useState } from 'react';\nimport { useSelector } from '../../redux/store';\nimport { hash, unhashHour, unhashWeekday } from '../../utils/converters';\nimport PostList from '../PostList';\nimport {\n  Cell,\n  Container,\n  Hint,\n  Label,\n  Row,\n  Table,\n  Time,\n} from './styles';\n\nconst weekdays = [\n  'Sun',\n  'Mon',\n  'Tue',\n  'Wed',\n  'Thu',\n  'Fri',\n  'Sat',\n];\n\nconst HeatMap: React.FC = (): ReactElement => {\n  // Get posts\n  const posts = useSelector((state) => state.data.posts);\n\n  // Get a color scheme indicator\n  const isLight = useSelector((state) => state.app.colorScheme === 'light');\n\n  // The index of a clicked cell\n  const [index, setIndex] = useState<number>(-1);\n\n  // Get the list of posts to render\n  const highlighted = index > 0\n    ? posts[unhashWeekday(index)][unhashHour(index)] : [];\n\n  // Render\n  return (\n    <>\n      <Container isLight={isLight}>\n        <Table>\n          <Row>\n            <Label />\n            {/* Render timestemps */\n            [...Array(24)].map((_, id) => (\n              <Time key={id}>\n                {id < 10 ? `0${id}` : id}\n                :00\n              </Time>\n            ))\n          }\n          </Row>\n          {/* Render heat map */\n          weekdays.map((name, weekday) => (\n            <Row key={weekday}>\n              <Label>{name}</Label>\n              {posts[weekday].map((data, hour) => (\n                <Cell\n                  key={weekday + hour}\n                  isLight={isLight}\n                  opacity={data.length}\n                  type=\"button\"\n                  onClick={() => setIndex(hash(weekday, hour))}\n                />\n              ))}\n            </Row>\n          ))\n        }\n        </Table>\n      </Container>\n      {index < 0 ? (\n        <Hint>\n          Click on any cell to see the most remarkable posts, if any\n        </Hint>\n      ) : <PostList posts={highlighted} />}\n    </>\n  );\n};\n\nexport default HeatMap;\n","/**\n * Hash weekday and hour to generate an id\n * for a heat table cell\n * @param {number} weekday\n * @param {number} hour\n * @returns {number}\n */\nexport const hash = (\n  weekday: number,\n  hour: number,\n): number => weekday * 100 + hour;\n\n/**\n * Unhash an id to get a weekday\n * @param {number} hash\n * @returns {number}\n */\nexport const unhashWeekday = (hash: number): number => Math.floor(hash / 100);\n\n/**\n * Unhash an id to get an hour\n * @param {number} hash\n * @returns {number}\n */\nexport const unhashHour = (hash: number): number => hash % 100;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  box-sizing: border-box;\n  max-width: 120rem;\n  margin: 0 auto;\n  padding: 2rem;\n  width: 100%;\n`;\n\nexport const Heading = styled.h2`\n  margin: 0 0 2rem 0;\n  font-weight: 600;\n  font-size: 4rem;\n`;\n","import React, { ReactElement, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport Error from '../../components/Error';\nimport HeatMap from '../../components/HeatMap';\nimport Loader from '../../components/Loader';\nimport { fetch, reset } from '../../redux/dataReducer';\nimport { Dispatch, useSelector } from '../../redux/store';\nimport { Container, Heading } from './styles';\n\nconst SubredditPage: React.FC = (): ReactElement => {\n  // Get a subreddit name\n  const { name } = useParams<{ name: string }>();\n\n  const isFetching = useSelector((state) => state.data.isFetching);\n  const isError = useSelector((state) => state.data.isError);\n\n  // Get a reference to the dispatch function\n  const dispatch: Dispatch = useDispatch();\n\n  // Fetch data on component will mount\n  useEffect(() => {\n    dispatch(fetch(name as string));\n    // Reset the state on component will unmount\n    return () => {\n      dispatch(reset());\n    };\n  }, [dispatch, name]);\n\n  // Render error message, if an error occurs\n  if (isError) return <Error />;\n\n  // Render loader on fetching\n  if (isFetching) return <Loader />;\n\n  // Render\n  return (\n    <>\n      <Helmet>\n        <title>{`React Analytics • ${name}`}</title>\n      </Helmet>\n      <Container>\n        <Heading>{`/ ${name}`}</Heading>\n        <HeatMap />\n      </Container>\n    </>\n  );\n};\n\nexport default SubredditPage;\n"],"names":["Container","styled","Heading","props","isLight","Description","useSelector","state","app","colorScheme","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","Card","Header","Raiting","Date","Title","Author","AuthorLink","data","score","toFixed","dayjs","created_utc","format","href","full_link","target","rel","title","userURL","author","Subheading","posts","length","map","post","id","Table","Row","Label","Time","Cell","opacity","Hint","weekdays","useState","index","setIndex","highlighted","hash","Math","floor","unhashWeekday","unhashHour","_","name","weekday","hour","type","onClick","useParams","isFetching","isError","dispatch","useDispatch","useEffect","fetch","reset","Loader","Helmet"],"sourceRoot":""}