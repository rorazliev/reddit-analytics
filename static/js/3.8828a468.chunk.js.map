{"version":3,"sources":["pages/Subreddit/index.module.scss","components/Error/index.module.scss","components/HeatMap/index.module.scss","components/PostList/index.module.scss","components/Post/index.module.scss","api/reddit.ts","helpers/sortPosts.ts","components/Error/index.tsx","components/Post/index.tsx","components/PostList/index.tsx","components/HeatMap/index.tsx","helpers/converters.ts","pages/Subreddit/index.tsx"],"names":["module","exports","fetchData","subreddit","start","dayjs","subtract","unix","fetch","sortPosts","posts","sorted","Array","fill","map","forEach","post","index","time","created_utc","weekday","day","hour","push","Error","className","style","container","heading","description","Post","card","header","rating","score","toFixed","date","format","title","href","full_link","target","rel","author","authorLink","id","PostList","length","subheading","weekdays","cellColors","lighter","light","medium","dark","darker","HeatMap","useState","setIndex","highlighted","hash","Math","floor","unhashWeekday","unhashHour","table","row","label","_","name","data","type","onClick","colors","palette","color","hint","Subreddit","useParams","setPosts","isFetching","setIsFetching","isError","setIsError","useEffect","a","api","promise","json","Loader","Helmet"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,QAAU,6B,mBCArED,EAAOC,QAAU,CAAC,UAAY,yBAAyB,QAAU,uBAAuB,YAAc,6B,mBCAtGD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,uBAAuB,OAAS,wBAAwB,KAAO,sBAAsB,OAAS,wBAAwB,UAAY,2BAA2B,MAAQ,uBAAuB,IAAM,qBAAqB,MAAQ,uBAAuB,KAAO,sBAAsB,KAAO,sBAAsB,OAAS,wBAAwB,QAAU,2B,mBCAxZD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,QAAU,0BAA0B,WAAa,+B,mBCA3GD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,OAAS,qBAAqB,MAAQ,oBAAoB,KAAO,mBAAmB,OAAS,qBAAqB,WAAa,2B,oICY5LC,EAAY,SACvBC,GAGA,IAAMC,EAAQC,MAAQC,SAAS,EAAG,SAASC,OAG3C,OAAOC,MAAM,GAAD,OAjBS,kCAiBT,yCACiCL,EADjC,kBACoDC,EADpD,iBAFE,IAEF,gCCKCK,EAjBG,SAACC,GAEjB,IAAMC,EAAsB,IAAIC,MAAc,GAAGC,KAAK,GAAGC,KACvD,kBAAM,IAAIF,MAAc,IAAIC,KAAK,GAAGC,KAAI,iBAAM,SAWhD,OAPAJ,EAAMK,SAAQ,SAACC,EAAMC,GACnB,IAAMC,EAAOb,IAAME,KAAKG,EAAMO,GAAOE,aAC/BC,EAAUF,EAAKG,MACfC,EAAOJ,EAAKI,OAClBX,EAAOS,GAASE,GAAMC,KAAKP,MAGtBL,G,wBCRMa,EAXS,kBACtB,sBAAKC,UAAWC,IAAMC,UAAtB,UACE,oBAAIF,UAAWC,IAAME,QAArB,gBACA,oBAAGH,UAAWC,IAAMG,YAApB,oCAEG,IAFH,2C,mECuCWC,EAlCkB,SAAC,GAAD,IAAGd,EAAH,EAAGA,KAAH,OAC/B,sBAAKS,UAAWC,IAAMK,KAAtB,UACE,sBAAKN,UAAWC,IAAMM,OAAtB,UACE,sBAAKP,UAAWC,IAAMO,OAAtB,UACE,cAAC,IAAD,IACCjB,EAAKkB,OAAS,IAAd,WAAyBlB,EAAKkB,MAAQ,KAAMC,QAAQ,GAApD,KAA4DnB,EAAKkB,SAEpE,sBAAMT,UAAWC,IAAMU,KAAvB,SACG/B,IAAME,KAAKS,EAAKG,aAAakB,OAAO,cAGzC,mBACEZ,UAAWC,IAAMY,MACjBC,KAAMvB,EAAKwB,UACXC,OAAO,SACPC,IAAI,aAJN,SAMG1B,EAAKsB,QAER,uBAAMb,UAAWC,IAAMiB,OAAvB,sBAEG,IACD,mBACElB,UAAWC,IAAMkB,WACjBL,KAAI,UH7BW,0BG6BX,YAAgBvB,EAAK2B,QACzBF,OAAO,SACPC,IAAI,aAJN,SAMG1B,EAAK2B,cA3BqB3B,EAAK6B,KC4BzBC,EA/BsB,SAAC,GAAkC,IAAD,IAA/BpC,aAA+B,MAAvB,GAAuB,EAErE,OAAqB,IAAjBA,EAAMqC,OAEN,sBAAKtB,UAAWC,IAAMC,UAAtB,UACE,oBAAIF,UAAWC,IAAME,QAArB,2BACA,oBAAGH,UAAWC,IAAMsB,WAApB,wEAEG,IAFH,mCAWJ,sBAAKvB,UAAWC,IAAMC,UAAtB,UACE,oBAAIF,UAAWC,IAAME,QAArB,yBACA,mBAAGH,UAAWC,IAAMsB,WAApB,mFAIEtC,EAAMI,KAAI,SAACE,GAAD,OACR,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAK6B,WCpBpBI,EAAW,CACf,MACA,MACA,MACA,MACA,MACA,MACA,OAIIC,EAAa,CACjBxB,IAAMyB,QACNzB,IAAM0B,MACN1B,IAAM2B,OACN3B,IAAM4B,KACN5B,IAAM6B,QAmEOC,EAhEqB,SAAC,GAA6B,IAA3B9C,EAA0B,EAA1BA,MAErC,EAA0B+C,oBAAU,GAApC,mBAAOxC,EAAP,KAAcyC,EAAd,KAGMC,EAAc1C,EAAQ,EACxBP,ECrBuB,SAACkD,GAAD,OAA0BC,KAAKC,MAAMF,EAAO,KDqB7DG,CAAc9C,ICdA,SAAC2C,GAAD,OAA0BA,EAAO,IDczBI,CAAW/C,IACvC,GAEJ,OACE,qCACE,sBAAKQ,UAAWC,IAAMC,UAAtB,UACE,sBAAKF,UAAWC,IAAMuC,MAAtB,UAEE,sBAAKxC,UAAWC,IAAMwC,IAAtB,UACE,qBAAKzC,UAAWC,IAAMyC,QAEtB,YAAIvD,MAAM,KAAKE,KAAI,SAACsD,EAAGvB,GAAJ,OACjB,sBAAKpB,UAAWC,IAAMR,KAAtB,UACG2B,EAAK,GAAL,WAAcA,GAAOA,EADxB,eASJI,EAASnC,KAAI,SAACuD,EAAMjD,GAAP,OACX,sBAAmBK,UAAWC,IAAMwC,IAApC,UACE,qBAAKzC,UAAWC,IAAMyC,MAAtB,SAA8BE,IAE5B3D,EAAMU,GAASN,KAAI,SAACwD,EAAMhD,GAAP,OACjB,wBAEEG,UAAWyB,EAAWoB,EAAKvB,QAC3BwB,KAAK,SACLC,QAAS,kBAAMd,EC7Df,SAClBtC,EACAE,GAFkB,OAGG,IAAVF,EAAgBE,ED0DesC,CAAKxC,EAASE,MAHjCF,EAAUE,QALbF,SAgBd,sBAAKK,UAAWC,IAAM+C,OAAtB,UACE,wCACA,qBAAKhD,UAAWC,IAAMgD,QAAtB,SAEExB,EAAWpC,KAAI,SAAC6D,EAAO9B,GAAR,OAAe,qBAAcpB,UAAWkD,GAAf9B,QAG1C,8CAGJ,mBAAGpB,UAAWC,IAAMkD,KAApB,wEAIE3D,EAAQ,EAAI,cAAC,EAAD,CAAUP,MAAOiD,IAAkB,S,QErBxCkB,UA1Da,WAE1B,IAAQ1E,EAAc2E,cAAd3E,UAGR,EAA0BsD,mBAAsB,IAAhD,mBAAO/C,EAAP,KAAcqE,EAAd,KACA,EAAoCtB,oBAAS,GAA7C,mBAAOuB,EAAP,KAAmBC,EAAnB,KACA,EAA8BxB,oBAAS,GAAvC,mBAAOyB,EAAP,KAAgBC,EAAhB,KAyBA,OAtBAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,6DAECJ,GAAc,GAFf,kBAMyBK,EAAcnF,GANvC,cAMSoF,EANT,gBAOsBA,EAAQC,OAP9B,OAOSlB,EAPT,OAQS3D,EAASF,EAAU6D,EAAKA,MAE9BS,EAASpE,GAVZ,kDAYGwE,GAAW,GAZd,QAgBCF,GAAc,GAhBf,yDAAD,KAkBC,CAAC9E,IAGA6E,EAAmB,cAACS,EAAA,EAAD,IAGnBP,EAAgB,cAAC,EAAD,IAGfF,GAAeE,GAA4B,IAAjBxE,EAAMqC,OAInC,qCACE,cAAC2C,EAAA,EAAD,UACE,gCAAQvF,MAEV,sBAAKsB,UAAWC,IAAMC,UAAtB,UACE,qBAAIF,UAAWC,IAAME,QAArB,gBAEG,IACAzB,KAEH,cAAC,EAAD,CAASO,MAAOA,UAdoC,cAAC,EAAD","file":"static/js/3.8828a468.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Subreddit_container__2QUnA\",\"heading\":\"Subreddit_heading__1Mu_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error_container__1h0cS\",\"heading\":\"Error_heading__tz_9R\",\"description\":\"Error_description__2-G_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lighter\":\"HeatMap_lighter__3DXw3\",\"light\":\"HeatMap_light__2Nxj_\",\"medium\":\"HeatMap_medium__1IqEZ\",\"dark\":\"HeatMap_dark__1wJGg\",\"darker\":\"HeatMap_darker__2yEIN\",\"container\":\"HeatMap_container__1ig5I\",\"table\":\"HeatMap_table__3O-2Y\",\"row\":\"HeatMap_row__2LvNh\",\"label\":\"HeatMap_label__Wrjo2\",\"time\":\"HeatMap_time__VF4Vi\",\"hint\":\"HeatMap_hint__1tEv3\",\"colors\":\"HeatMap_colors__9oNbs\",\"palette\":\"HeatMap_palette__1h4Q7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PostList_container__31cVu\",\"heading\":\"PostList_heading__2wtaw\",\"subheading\":\"PostList_subheading__1a4pC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Post_card__32HhO\",\"header\":\"Post_header__3Uqw8\",\"rating\":\"Post_rating__3iJMT\",\"title\":\"Post_title__1nMvj\",\"date\":\"Post_date__10wZu\",\"author\":\"Post_author__kfSiU\",\"authorLink\":\"Post_authorLink__2mR67\"};","import dayjs from 'dayjs';\n\n// Base URL for API calls\nexport const baseURL = 'https://api.pushshift.io/reddit';\n\n// Base URL for a user link\nexport const userURL = 'https://reddit.com/user';\n\n/**\n * Fetch posts posted on a given subreddit\n * @param {string} subreddit\n * @returns {Promise<Response>}\n */\nexport const fetchData = (\n  subreddit: string,\n): Promise<Response> => {\n  // Calculate a start date\n  const start = dayjs().subtract(1, 'years').unix();\n  const posts = 100;\n\n  return fetch(\n    `${baseURL}/submission/search/?subreddit=${subreddit}&after=${start}&size=${posts}&sort=desc&sort_type=score`,\n  );\n};\n","import dayjs from 'dayjs';\nimport { Post, SortedPosts } from '../types/post';\n\n/**\n * Sort given posts by weekday and hour\n * @param {Post[]} posts\n * @returns {SortedPosts}\n */\nconst sortPosts = (posts: Post[]): SortedPosts => {\n  // Create an array for sorted posts\n  const sorted: SortedPosts = new Array<number>(7).fill(0).map(\n    () => new Array<number>(24).fill(0).map(() => [] as Post[]),\n  );\n\n  // Iterate posts and sort by weekday and hour\n  posts.forEach((post, index) => {\n    const time = dayjs.unix(posts[index].created_utc);\n    const weekday = time.day();\n    const hour = time.hour();\n    sorted[weekday][hour].push(post);\n  });\n\n  return sorted;\n};\n\nexport default sortPosts;\n","import React, { ReactElement } from 'react';\nimport style from './index.module.scss';\n\nconst Error: React.FC = (): ReactElement => (\n  <div className={style.container}>\n    <h2 className={style.heading}>:(</h2>\n    <p className={style.description}>\n      You ether did a mistake\n      {' '}\n      or this subreddit does not exist.\n    </p>\n  </div>\n);\n\nexport default Error;\n","import React, { ReactElement } from 'react';\nimport dayjs from 'dayjs';\nimport style from './index.module.scss';\nimport { Star } from '../Icons';\nimport { Post as PostType } from '../../types/post';\nimport { userURL } from '../../api/reddit';\n\ntype PropType = {\n  post: PostType,\n};\n\nconst Post: React.FC<PropType> = ({ post }): ReactElement => (\n  <div className={style.card} key={post.id}>\n    <div className={style.header}>\n      <div className={style.rating}>\n        <Star />\n        {post.score >= 1000 ? `${(post.score / 1000).toFixed(1)}k` : post.score}\n      </div>\n      <span className={style.date}>\n        {dayjs.unix(post.created_utc).format('h:mma')}\n      </span>\n    </div>\n    <a\n      className={style.title}\n      href={post.full_link}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      {post.title}\n    </a>\n    <span className={style.author}>\n      Posted by\n      {' '}\n      <a\n        className={style.authorLink}\n        href={`${userURL}/${post.author}`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {post.author}\n      </a>\n    </span>\n  </div>\n);\n\nexport default Post;\n","import React, { ReactElement } from 'react';\nimport style from './index.module.scss';\nimport Post from '../Post';\nimport { Post as PostType } from '../../types/post';\n\ntype PropType = {\n  posts: PostType[]\n}\n\nconst PostList: React.FC<PropType> = ({ posts = [] }): ReactElement => {\n  // if no post found, render the message\n  if (posts.length === 0) {\n    return (\n      <div className={style.container}>\n        <h3 className={style.heading}>No Post Found</h3>\n        <p className={style.subheading}>\n          We cound not find anything that is worthy of being noticed.\n          {' '}\n          Try another date and time.\n        </p>\n      </div>\n    );\n  }\n\n  // Render\n  return (\n    <div className={style.container}>\n      <h3 className={style.heading}>The Best of</h3>\n      <p className={style.subheading}>\n        We have found some remarkable posts that are worthy of being noticed.\n      </p>\n      {\n        posts.map((post) => (\n          <Post key={post.id} post={post} />\n        ))\n      }\n    </div>\n  );\n};\n\nexport default PostList;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { ReactElement, useState } from 'react';\nimport style from './index.module.scss';\nimport { unhashHour, unhashWeekday, hash } from '../../helpers/converters';\nimport { SortedPosts } from '../../types/post';\nimport PostList from '../PostList';\n\ntype PropType = {\n  posts: SortedPosts\n}\n\n// Used to display a column of weekdays\nconst weekdays = [\n  'Sun',\n  'Mon',\n  'Tue',\n  'Wed',\n  'Thu',\n  'Fri',\n  'Sat',\n];\n\n// Used to style heat map cells\nconst cellColors = [\n  style.lighter,\n  style.light,\n  style.medium,\n  style.dark,\n  style.darker,\n];\n\nconst HeatMap: React.FC<PropType> = ({ posts }): ReactElement => {\n  // Index used to identify a focused heat map cell\n  const [index, setIndex] = useState(-1);\n\n  // Highlighted posts for weekday / hour\n  const highlighted = index > 0\n    ? posts[unhashWeekday(index)][unhashHour(index)]\n    : [];\n\n  return (\n    <>\n      <div className={style.container}>\n        <div className={style.table}>\n          {/* The hour row */}\n          <div className={style.row}>\n            <div className={style.label} />\n            {\n            [...Array(24)].map((_, id) => (\n              <div className={style.time}>\n                {id < 10 ? `0${id}` : id}\n                :00\n              </div>\n            ))\n          }\n          </div>\n          {/* Heat map */}\n          {\n          weekdays.map((name, weekday) => (\n            <div key={weekday} className={style.row}>\n              <div className={style.label}>{name}</div>\n              {\n                posts[weekday].map((data, hour) => (\n                  <button\n                    key={weekday + hour}\n                    className={cellColors[data.length]}\n                    type=\"button\"\n                    onClick={() => setIndex(hash(weekday, hour))}\n                  />\n                ))\n              }\n            </div>\n          ))\n        }\n        </div>\n        <div className={style.colors}>\n          <span>Less</span>\n          <div className={style.palette}>\n            {\n            cellColors.map((color, id) => <div key={id} className={color} />)\n            }\n          </div>\n          <span>More</span>\n        </div>\n      </div>\n      <p className={style.hint}>\n        Click on any cell to see the most remarkable posts, if any\n      </p>\n      {\n        index > 0 ? <PostList posts={highlighted} /> : null\n      }\n    </>\n  );\n};\n\nexport default HeatMap;\n","/**\n * Hash weekday and hour to generate an id\n * for a heat table cell\n * @param {number} weekday\n * @param {number} hour\n * @returns {number}\n */\nexport const hash = (\n  weekday: number,\n  hour: number,\n): number => weekday * 100 + hour;\n\n/**\n * Unhash an id to get weekday\n * @param {number} hash\n * @returns {number}\n */\nexport const unhashWeekday = (hash: number): number => Math.floor(hash / 100);\n\n/**\n * Unhash an id to get hour\n * @param {number} hash\n * @returns {number}\n */\nexport const unhashHour = (hash: number): number => hash % 100;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useParams } from 'react-router-dom';\nimport style from './index.module.scss';\nimport * as api from '../../api/reddit';\nimport sortPosts from '../../helpers/sortPosts';\nimport Error from '../../components/Error';\nimport HeatMap from '../../components/HeatMap';\nimport Loader from '../../components/Loader';\nimport { SortedPosts } from '../../types/post';\n\nconst Subreddit: React.FC = (): ReactElement => {\n  // Get subreddit name from URL\n  const { subreddit } = useParams<{subreddit: string}>();\n\n  //\n  const [posts, setPosts] = useState<SortedPosts>([]);\n  const [isFetching, setIsFetching] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  // Fetch data\n  useEffect(() => {\n    (async () => {\n      // Start fetching\n      setIsFetching(true);\n\n      // Fetch data\n      try {\n        const promise = await api.fetchData(subreddit);\n        const data = await promise.json();\n        const sorted = sortPosts(data.data);\n\n        setPosts(sorted);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      // Stop fetching\n      setIsFetching(false);\n    })();\n  }, [subreddit]);\n\n  // On fetching\n  if (isFetching) return <Loader />;\n\n  // On error occured\n  if (isError) return <Error />;\n\n  // On subreddit does not exist\n  if (!isFetching && !isError && posts.length === 0) return <Error />;\n\n  // Render\n  return (\n    <>\n      <Helmet>\n        <title>{subreddit}</title>\n      </Helmet>\n      <div className={style.container}>\n        <h2 className={style.heading}>\n          r /\n          {' '}\n          {subreddit}\n        </h2>\n        <HeatMap posts={posts} />\n      </div>\n    </>\n  );\n};\n\nexport default Subreddit as React.FC;\n"],"sourceRoot":""}